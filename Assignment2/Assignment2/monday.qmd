---
title: "Assignment 2"
author: "Lana de Jong"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Loading the data

```{r}

```

##Running the library

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
library(lubridate)
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
crime_data <- read.csv("South Africa crime data.csv")
crime_data_long <- crime_data |> 
  pivot_longer(cols = c(-Province, -Station, -Category), names_to = "Year", values_to = "Count" ) |> 
  mutate(Year = gsub("X|\\..*", "", Year)) |> 
  mutate(Year = year(as.Date(paste0(Year, '-01-01'), format ="%Y")))

```

##Overall crime rate in South Africa

```{r}
crime_rate<- crime_data_long |>
  group_by(Year) |>
  summarise(total=sum(Count))|>
  arrange(desc(Year)) 

ggplot(data = crime_rate, aes(x = Year, y = total)) +
  geom_line(color = "black") +
  scale_x_continuous(breaks = unique(crime_rate$Year)) +
  scale_y_continuous(labels = scales::comma) +
  labs(x = "Year", y = "Total Crimes Reported", title = "Overall crime rate in South Afrca")
  theme()

```

## Total crimes per province

```{r}
province_crime<- crime_data_long |>
  group_by(Province) |>
  summarise(total=sum(Count))|>
  arrange(desc(total)) 

ggplot(data = province_crime, aes(x = reorder(Province, total) , y = total)) +
  geom_bar(stat = "identity", fill = "skyblue4") +
  scale_y_continuous(labels = scales::comma) +
  labs(
    x = "Province",
    y = "Total Crimes",
    title = "Total Crimes per Province")+
   theme(panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.background = element_blank(),
    panel.background = element_blank(),
    )

 # ggplot(data = province_crime, aes(x = Province, fill = total)) +
 #  geom_bar() +
 #  theme_minimal() +
 #  labs(title = "Total Crimes by Province") +
 #  facet_wrap(~ total) +
 #  theme(legend.position = "bottom",
 #        panel.grid.minor = element_blank())



```

## Areas that experience higher crime per province

```{r}
crime_region<- crime_data_long |>
  group_by(Province, Station) |>
  summarise(total=sum(Count)) |>
  arrange(desc(total)) |>
  slice_head(n = 15)
crime_region





```

##Most commen crimes in South Africa

```{r}
crime_type<- crime_data_long |>
  group_by(Category) |>
  summarise(total=sum(Count)) |>
  arrange(desc(total))
crime_type

```

## 

```{r}
library(dplyr)

crime_totals_per_province <- crime_data_long |>
  group_by(Province, Category) |>
  summarise(total = sum(Count))

province_totals <- crime_totals_per_province |>
  group_by(Province) |>
  summarise(total_province = sum(total))


crime_proportions <- crime_totals_per_province |>
  left_join(province_totals, by = "Province") |>
  mutate(proportion = total / total_province) |>
  arrange(Province, desc(proportion))
crime_proportions

library(dplyr)

# Assuming you already have crime_proportions dataframe from your previous code

top_categories_per_province <- crime_proportions %>%
  group_by(Province) %>%
  # top_n(15, proportion) %>%
  arrange(Province, desc(proportion))

top_categories_per_province


```

```{r}
crime_totals_per_station <- crime_data_long |>
  filter(Province=="Gauteng")|>
  group_by(Station) |>
  summarise(total = sum(Count))

station_totals <- crime_totals_per_station |>
  group_by(Station) |>
  summarise(total_station = sum(total))

crime_proportions <- crime_totals_per_station |>
  left_join(station_totals, by = "Station") |>
  mutate(proportion = total / total_station) |>
  arrange(Station, desc(proportion))

top_categories_per_station <- crime_proportions |>
  group_by(Station) |>
  top_n(15, proportion) |>
  arrange(Station, desc(proportion))

top_categories_per_station

```

```{r}
library(dplyr)

station_count <- crime_data_long %>%
  filter(Province == "Gauteng") %>%
  summarise(total_stations = n_distinct(Station))

station_count


# Assuming your dataset is named 'crime_data_long'

# Create a subset of data for Gauteng province
gauteng_data <- subset(crime_data_long, Province == "Gauteng")

# Group by Station and count occurrences
station_counts <- aggregate(. ~ Station, data = gauteng_data, FUN = length)

# Rename the count column
names(station_counts)[2] <- "Count"

# Print the result
print(station_counts)

```

```{r}
# Sample data
crime_categories <- c("Violent Crimes", "Property Crimes", "White-Collar Crimes", "Drug-Related Crimes", "Cyber Crimes", "Traffic Violations")
weights <- c(9, 7, 6, 5, 8, 3)
crime_data <- data.frame(Category = crime_categories, Weight = weights)

# Load ggplot2 library
library(ggplot2)

# Create vertical bar plot
ggplot(crime_data, aes(x = Category, y = Weight)) +
  geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
  labs(x = "Category of Crime", y = "Weight", title = "Weights of Crime Categories") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) # Rotate x-axis labels for better readability

# Calculate mean weight across categories
mean_weight <- mean(crime_data$Weight)

# Create vertical bar plot
ggplot(crime_data, aes(x = Category, y = Weight)) +
  geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
  geom_hline(yintercept = mean_weight, color = "red", linetype = "dashed", size = 1) + # Add horizontal line at mean weight
  labs(x = "Category of Crime", y = "Weight", title = "Weights of Crime Categories") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) # Rotate x-axis labels for better readability


# Add a numerical index to the data
crime_data$Index <- seq_along(crime_data$Category)

# Create vertical bar plot with smoothed trend line
ggplot(crime_data, aes(x = Index, y = Weight)) +
  geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
  geom_smooth(method = "loess", se = FALSE, color = "red") +  # Add a smoothed trend line
  scale_x_continuous(breaks = crime_data$Index, labels = crime_data$Category) +  # Use category names as x-axis labels
  labs(x = "Category of Crime", y = "Weight", title = "Weights of Crime Categories") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  # Rotate x-axis labels for better readability


```

```{r}

# Filter data for OR Tambo
ortambo_data <- crime_data_long %>%
  filter(Station == "OR Tambo")

# Extract unique crime categories
crime_categories <- unique(ortambo_data$Category)

# Print the unique crime categories
print(crime_categories)

```

```{r}
treemap_data <- crime_data_long |>
  filter(Year=="2011")|>
  group_by(Category) |>
  mutate(total = sum(Category)) |>
  mutate(total_percent = (Count / total)*100)

treemap_graph <- treemap_data|>
  ggplot( aes(area = deceased_percent, fill = subregion1_name, label = paste0(subregion1_name, "\n", sprintf("%.2f%%", deceased_percent * 100)))) +
  geom_treemap() +
  geom_treemap_text(place = "centre", colour = "white", size = 15) +
  labs(title = "Mortality rate per Province") +
  theme(legend.position = "none")
treemap_graph
```

```{r}
data <- data_frame(
  Contact_Crimes_against_an_individual = c("Murder", "Sexual Offences", "Attempted murder", "Assault with the intent to inflict grievous bodily harm", "Robbery with aggravating circumstances"),
  Low_Contact_Crimes = c("Common assault", "Common robbery", "Arson", NA, NA),
  Property_related_Crimes = c("Malicious damage to property", "Burglary at non-residential premises", "Burglary at residential premises", "Theft of motor vehicle and motorcycle", "Theft out of or from motor vehicle", "Stock-theft"),
  Aggravated_Robbery = c("Carjacking", "Robbery at non-residential premises", "Robbery at residential premises", "Robbery of cash in transit", "Bank robbery", "Truck hijacking"),
  Crimes_detected_due_to_Police_Action  = c("Illegal possession of firearms and ammunition", "Drug-related crime", "Driving under the influence of alcohol or drugs", "Sexual offences as a result of police action",),
  Misdemeanor= c("All theft not mentioned elsewhere", "Commercial crime", "Shoplifting")
)

data_long <- pivot_longer(data, 
                           cols = everything(), 
                           names_to = "Crime_Category", 
                           values_to = "Crime_Type")

print(data_long)

   
```

```{r}
data <- data_frame (
  Contact_Crimes_against_an_individual = c("Murder", "Sexual Offences", "Attempted murder", "Assault with the intent to inflict grievous bodily harm", "Robbery with aggravating circumstances", NA),
  Low_Contact_Crimes = c("Common assault", "Common robbery", "Arson", NA, NA, NA),
  Property_related_Crimes = c("Malicious damage to property", "Burglary at non-residential premises", "Burglary at residential premises", "Theft of motor vehicle and motorcycle", "Theft out of or from motor vehicle", "Stock-theft"),
  Aggravated_Robbery = c("Carjacking", "Robbery at non-residential premises", "Robbery at residential premises", "Robbery of cash in transit", "Bank robbery", "Truck hijacking"),
  Crimes_detected_due_to_Police_Action = c("Illegal possession of firearms and ammunition", "Drug-related crime", "Driving under the influence of alcohol or drugs", "Sexual offences as a result of police action", NA, NA),
  Misdemeanor = c("All theft not mentioned elsewhere", "Commercial crime", "Shoplifting", NA, NA, NA)
)


data_long <- pivot_longer(data, 
                           cols = everything(), 
                           names_to = "crime_category", 
                           values_to = "Crime_Type") |>
                          na.omit()

data_long <- data_long |>
  mutate(
  crime_weight = case_when(
    crime_category == "Contact_Crimes_against_an_individual" ~ 1.9 ,
    crime_category == "Low_Contact_Crimes" ~ 1.8 , 
    crime_category == "Property_related_Crimes" ~ 1.7 , 
    crime_category == "Aggravated_Robbery" ~ 1.6 , 
    crime_category == "Crimes_detected_due_to_Police_Action" ~ 1.5 , 
    crime_category == "Misdemeanor" ~ 1.4 ) )

print(data_long)


mutate(
  crime_weight = case_when(
    Category %in% c("Murder", "Sexual Offences", "Attempted murder", "Assault with the intent to inflict grievous bodily harm", "Robbery with aggravating circumstances") ~ 1.9,
    Category %in% c("Common assault", "Common robbery", "Arson") ~ 1.8,
    Category %in% c("Malicious damage to property", "Burglary at non-residential premises", "Burglary at residential premises", "Theft of motor vehicle and motorcycle", "Theft out of or from motor vehicle", "Stock-theft") ~ 1.6,
    Category %in% c("Carjacking", "Robbery at non-residential premises", "Robbery at residential premises", "Robbery of cash in transit", "Bank robbery", "Truck hijacking") ~ 1.7,
    Category %in% c("Illegal possession of fire arms and ammunition", "Drug-related crime", "Driving under the influence of alcohol or drugs", "Sexual offences as a result of police action") ~ 1.5,
    Category %in% c("All theft not mentioned elsewhere", "Commercial crime", "Shoplifting") ~ 1.4
    )) |> 
  
  
  
  
#   mutate(crime_per_thousand = (total_weighted_crime/estimated_population)*1000) |> 
#   mutate(unw_crime_per_thou = (total_crime/estimated_population)*1000) |> 
  
  
  crime_data_weight_pop |>  
  na.omit() |> 
  ggplot(aes(x=reorder(Station,unw_crime_per_thou), y=unw_crime_per_thou)) +
  geom_bar(stat = "identity", fill="#00699A") +
  scale_y_continuous(labels = scales::comma)+
  scale_x_discrete()+
  labs(x = "Station Names",
       y = "Total Crime",
       title = "Total Crime Count per Thousand People per Station")+
  theme_ipsum(base_family = "sans",)+
  theme(axis.title.x = element_text(size = 13, hjust = 0.5),
        axis.title.y = element_text(size = 13, hjust = 0.5),
        axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1),
        text = element_text(size = 8))

# crime_data_weight_pop <- crime_data_weight_pop |> 
#   distinct(Station, crime_per_thousand, unw_crime_per_thou) |> 
#   na.omit() |> 
#   arrange(desc(crime_per_thousand)) 
# crime_data_weight_pop
```

```{r}



```
